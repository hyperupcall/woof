{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Woof Woof is the version manager to end all version managers. Summary Akin to asdf and sdkman , Woof is a multi-tool version manager. That is, it manages the installation of multiple versions for multiple tools simultaneously Woof supports many popular languages out of the box - see the Roadmap for more details Concepts Woof works so effectively because it is simple. To see implementation details of Woof, see this page There are two main concepts: Modules Modules are analogous to asdf or sdkman's plugins . They represent all the version possibilities of a particular tool. Examples of tools that may have a module include NodeJS, Python, and Please . Variants are also supported - for example, Python may have at least cpython , Nuitka , and MicroPython variants. To add support for a new language, tool, or program, write a module. Each module is implemented in a single Bash file. Functionalities of a particular module is a simple Bash function. See the Module API for more details. Filters Filters normalize release information for a particular module. For example, it may convert a JSON response from GitHub's Release API or a custom release file to a text format that is easier to parse in Bash. Each module must have a filter. Filters are written in either Bash, jq , or Perl. See the Filter API for more details)","title":"Woof"},{"location":"#woof","text":"Woof is the version manager to end all version managers.","title":"Woof"},{"location":"#summary","text":"Akin to asdf and sdkman , Woof is a multi-tool version manager. That is, it manages the installation of multiple versions for multiple tools simultaneously Woof supports many popular languages out of the box - see the Roadmap for more details","title":"Summary"},{"location":"#concepts","text":"Woof works so effectively because it is simple. To see implementation details of Woof, see this page There are two main concepts:","title":"Concepts"},{"location":"#modules","text":"Modules are analogous to asdf or sdkman's plugins . They represent all the version possibilities of a particular tool. Examples of tools that may have a module include NodeJS, Python, and Please . Variants are also supported - for example, Python may have at least cpython , Nuitka , and MicroPython variants. To add support for a new language, tool, or program, write a module. Each module is implemented in a single Bash file. Functionalities of a particular module is a simple Bash function. See the Module API for more details.","title":"Modules"},{"location":"#filters","text":"Filters normalize release information for a particular module. For example, it may convert a JSON response from GitHub's Release API or a custom release file to a text format that is easier to parse in Bash. Each module must have a filter. Filters are written in either Bash, jq , or Perl. See the Filter API for more details)","title":"Filters"},{"location":"details/","text":"Details Things Current version can be determined by Global version (default) Per-directory Per tty/pty Approach When creating version managers, there are two approaches: shims and symlinks Shims In essence, the shim layer is an indirection layer that facilities executing the proper version. This is usually implemented with some sort of shell script. The version is derived from the current context, which can include the current tty/pty, current directory, or global version. I don't like shims, primarily because they incur a time penalty; that is, the startup initialization of a shell. This would influence things like benchmarks. This approach also feels dirty to me. Shims might be required to make features such as (per-tty versions) more reliable Symlinks There is no startup penalty for symlinks, unlike shims. The tradeoff is that it is harder to implement when accounting for the current context. Mainly, extra code needs to be evaluated during the initialization of interactive shells (or just the primary login shell). Installing The installation steps for installing any particular version of any particular module are streamlined. Unlike similar projects ( asdf ), all plugins (we call them modules) are installed by default. Only the most popular modules are shown by default as not to overwhelm the user. Not only that, but all code is ran under the same shell context (with the exception of filters , (of which, many are written for Deno in TypeScript)). Similarly, this contrasts previous approaches since extraneous subshells are minimized to reduce unnecessary performance penalties (especially on platforms like Cygwin, etc.). This also means there is more code reuse between modules","title":"Details"},{"location":"details/#details","text":"","title":"Details"},{"location":"details/#things","text":"Current version can be determined by Global version (default) Per-directory Per tty/pty","title":"Things"},{"location":"details/#approach","text":"When creating version managers, there are two approaches: shims and symlinks","title":"Approach"},{"location":"details/#shims","text":"In essence, the shim layer is an indirection layer that facilities executing the proper version. This is usually implemented with some sort of shell script. The version is derived from the current context, which can include the current tty/pty, current directory, or global version. I don't like shims, primarily because they incur a time penalty; that is, the startup initialization of a shell. This would influence things like benchmarks. This approach also feels dirty to me. Shims might be required to make features such as (per-tty versions) more reliable","title":"Shims"},{"location":"details/#symlinks","text":"There is no startup penalty for symlinks, unlike shims. The tradeoff is that it is harder to implement when accounting for the current context. Mainly, extra code needs to be evaluated during the initialization of interactive shells (or just the primary login shell).","title":"Symlinks"},{"location":"details/#installing","text":"The installation steps for installing any particular version of any particular module are streamlined. Unlike similar projects ( asdf ), all plugins (we call them modules) are installed by default. Only the most popular modules are shown by default as not to overwhelm the user. Not only that, but all code is ran under the same shell context (with the exception of filters , (of which, many are written for Deno in TypeScript)). Similarly, this contrasts previous approaches since extraneous subshells are minimized to reduce unnecessary performance penalties (especially on platforms like Cygwin, etc.). This also means there is more code reuse between modules","title":"Installing"},{"location":"languages/","text":"Languages Woof aims to support the following languages / programs There are three levels of support: None Dogfooding (it works on my machine) Complete (works everywhere with supporting test suite) Buildless Language Current Support Official Download Replaces NodeJS Dogfooding Official asdf-node , n , nvm , nvm.fish , nvmw , avn , fnm , nave , nodist , nodenv , nodebrew Deno Dogfooding Official asdf-deno , justjavac/dvm , ghosind/dvm Go Dogfooding Official asdf-golang , gvm , stefanmaric/g , voidint/g , goenv , goup , oo Crystal Dogfooding Official asdf-crystal , crenv Nim Dogfooding Official asdf-nim , choosenim Dart Dogfooding Official asdf-dart , dvm Zig Dogfooding Official asdf-zig Haxe Dogfooding Official asdf-haxe , jasononeil/hvm , dpeek/hvm Neko Dogfooding Official asdf-neko Elm Dogfooding Official asdf-elm Julia Dogfooding Official asdf-julia , juliavm kubectl Dogfooding Official asdf-kubectl , kubenvz , kerl Cue Dogfooding Official asdf-cue , cue-lang gleam Dogfooding Official asdf-gleam Solidity Dogfooding Official asdf-solidity , svm Peco Dogfooding Official asdf-peco fstar Dogfooding Official asdf-fstar Please Dogfooding Official asdf-please Lean Dogfooding Official asdf-lean Ninja Dogfooding Official asdf-ninja gh Dogfooding Official V Dogfooding Official Earthly Dogfooding Official Hashicorp Boundary Dogfooding Official asdf-hashicorp Hashicorp Consul Dogfooding Official asdf-hashicorp Hashicorp Levant Dogfooding Official asdf-hashicorp Hashicorp Nomad Dogfooding Official asdf-hashicorp Hashicorp Packer Dogfooding Official asdf-hashicorp Hashicorp Sentinel Dogfooding Official asdf-hashicorp Hashicorp Serf Dogfooding Official asdf-hashicorp Hashicorp Terraform Dogfooding Official asdf-hashicorp , tfenfv , terraenv Hashicorp Vagrant Dogfooding Official asdf-hashicorp Hashicorp Vault Dogfooding Official asdf-hashicorp Hashicorp Waypoint Dogfooding Official asdf-hashicorp Buildfull This requires a modification to the Module API Language Current Support Official Download Replaces PHP None Official asdf-php , phpenv , phpbrew , php-version Python None Official asdf-python , pyenv , p , pvm Swift None Official asdf-swift , swiftenv Ruby None Official asdf-ruby , rvm , rbenv , chruby , frum erlang None Official asdf-erlang Elixir None Official asdf-elixir , exenv , kiex Meson None Official asdf-meson HHVM None Official To sort Runtime Current Support Official Download Replaces R None Official asdf-r , renv , Renv Java None Official asdf-java , jenv.be , sdkman , jenv , jabba Groovy None Official asdf-groovy , sdkman-groovy Scala None Official asdf-scala , sdkman-scala Clojure None Official clojure Dotty None Official asdf-dotty , dvm Kotlin None Official asdf-kotlin , kotlin-sdkman GraalVM None Official asdf-graalvm Haskell None Official asdf-haskell Racket None Official asdf-racket sml None Official asdf-sml idris None Official adsf-idris idris2 None Official asdf-idris2 Flutter None Official asdf-flutter , fvm ravi None Official Nelua None Official Odin None Official tl None Official MoonScript None Official Yuescript None Official LuxLang None Official Fennel None Official Hare None Official Eno None Official PureScript None Official Grain None Official Wren None Official Enso None Official Haxe None Official Slice None Official Red None Official Carp None Official vyper None Official Mint None Official Melody None Official Coconut None Official Ballerina None Official Odin None Official MoonScript None Official EmojiCode None Official artichoke None Official gluon None Official ChaiScript None Official janet None Official P None Official Tidal None Official Peregrine None Official Flix None Official haste-compiler None Official fetlang None Official pocketlang None Official factor None Official oh None Official cito None Official mun None Official Fo None Official Starlark None Official lily None Official curv None Official Ring None Official rescript None Official reason None Official wenyan None Official GoPlus None Official Pony None Official alda None Official elvish None Official unison None Official Gravity None Official gleam None Official Orca None Official Tengo None Official D None Official ispc None Official agda None Official Beef None Official lamdu None Official wasp None Official clojerl None Official Snap None Official anko None Official jakt None Official ngs None Official slang None Official asciidots None Official MetaCall None Official Rt None Official SATySFi None Official ng None Official OneLang None Official Nuances .kubectl_version .node-version , and .nvmrc .dvmrc .ruby-version and .rvmrc .tool-versions Misc fortran lua Dasel C C++ C# Objective-C? Bash OPAM / OCAML TypeScript, Less, imba, bhai, (via npm) wasm Out of Scope Rust because rustup is actually good Codename to version mapping (few languages do this and its easy to forget codenames)","title":"Languages"},{"location":"languages/#languages","text":"Woof aims to support the following languages / programs There are three levels of support: None Dogfooding (it works on my machine) Complete (works everywhere with supporting test suite)","title":"Languages"},{"location":"languages/#buildless","text":"Language Current Support Official Download Replaces NodeJS Dogfooding Official asdf-node , n , nvm , nvm.fish , nvmw , avn , fnm , nave , nodist , nodenv , nodebrew Deno Dogfooding Official asdf-deno , justjavac/dvm , ghosind/dvm Go Dogfooding Official asdf-golang , gvm , stefanmaric/g , voidint/g , goenv , goup , oo Crystal Dogfooding Official asdf-crystal , crenv Nim Dogfooding Official asdf-nim , choosenim Dart Dogfooding Official asdf-dart , dvm Zig Dogfooding Official asdf-zig Haxe Dogfooding Official asdf-haxe , jasononeil/hvm , dpeek/hvm Neko Dogfooding Official asdf-neko Elm Dogfooding Official asdf-elm Julia Dogfooding Official asdf-julia , juliavm kubectl Dogfooding Official asdf-kubectl , kubenvz , kerl Cue Dogfooding Official asdf-cue , cue-lang gleam Dogfooding Official asdf-gleam Solidity Dogfooding Official asdf-solidity , svm Peco Dogfooding Official asdf-peco fstar Dogfooding Official asdf-fstar Please Dogfooding Official asdf-please Lean Dogfooding Official asdf-lean Ninja Dogfooding Official asdf-ninja gh Dogfooding Official V Dogfooding Official Earthly Dogfooding Official Hashicorp Boundary Dogfooding Official asdf-hashicorp Hashicorp Consul Dogfooding Official asdf-hashicorp Hashicorp Levant Dogfooding Official asdf-hashicorp Hashicorp Nomad Dogfooding Official asdf-hashicorp Hashicorp Packer Dogfooding Official asdf-hashicorp Hashicorp Sentinel Dogfooding Official asdf-hashicorp Hashicorp Serf Dogfooding Official asdf-hashicorp Hashicorp Terraform Dogfooding Official asdf-hashicorp , tfenfv , terraenv Hashicorp Vagrant Dogfooding Official asdf-hashicorp Hashicorp Vault Dogfooding Official asdf-hashicorp Hashicorp Waypoint Dogfooding Official asdf-hashicorp","title":"Buildless"},{"location":"languages/#buildfull","text":"This requires a modification to the Module API Language Current Support Official Download Replaces PHP None Official asdf-php , phpenv , phpbrew , php-version Python None Official asdf-python , pyenv , p , pvm Swift None Official asdf-swift , swiftenv Ruby None Official asdf-ruby , rvm , rbenv , chruby , frum erlang None Official asdf-erlang Elixir None Official asdf-elixir , exenv , kiex Meson None Official asdf-meson HHVM None Official","title":"Buildfull"},{"location":"languages/#to-sort","text":"Runtime Current Support Official Download Replaces R None Official asdf-r , renv , Renv Java None Official asdf-java , jenv.be , sdkman , jenv , jabba Groovy None Official asdf-groovy , sdkman-groovy Scala None Official asdf-scala , sdkman-scala Clojure None Official clojure Dotty None Official asdf-dotty , dvm Kotlin None Official asdf-kotlin , kotlin-sdkman GraalVM None Official asdf-graalvm Haskell None Official asdf-haskell Racket None Official asdf-racket sml None Official asdf-sml idris None Official adsf-idris idris2 None Official asdf-idris2 Flutter None Official asdf-flutter , fvm ravi None Official Nelua None Official Odin None Official tl None Official MoonScript None Official Yuescript None Official LuxLang None Official Fennel None Official Hare None Official Eno None Official PureScript None Official Grain None Official Wren None Official Enso None Official Haxe None Official Slice None Official Red None Official Carp None Official vyper None Official Mint None Official Melody None Official Coconut None Official Ballerina None Official Odin None Official MoonScript None Official EmojiCode None Official artichoke None Official gluon None Official ChaiScript None Official janet None Official P None Official Tidal None Official Peregrine None Official Flix None Official haste-compiler None Official fetlang None Official pocketlang None Official factor None Official oh None Official cito None Official mun None Official Fo None Official Starlark None Official lily None Official curv None Official Ring None Official rescript None Official reason None Official wenyan None Official GoPlus None Official Pony None Official alda None Official elvish None Official unison None Official Gravity None Official gleam None Official Orca None Official Tengo None Official D None Official ispc None Official agda None Official Beef None Official lamdu None Official wasp None Official clojerl None Official Snap None Official anko None Official jakt None Official ngs None Official slang None Official asciidots None Official MetaCall None Official Rt None Official SATySFi None Official ng None Official OneLang None Official","title":"To sort"},{"location":"languages/#nuances","text":".kubectl_version .node-version , and .nvmrc .dvmrc .ruby-version and .rvmrc .tool-versions","title":"Nuances"},{"location":"languages/#misc","text":"fortran lua Dasel C C++ C# Objective-C? Bash OPAM / OCAML TypeScript, Less, imba, bhai, (via npm) wasm","title":"Misc"},{"location":"languages/#out-of-scope","text":"Rust because rustup is actually good Codename to version mapping (few languages do this and its easy to forget codenames)","title":"Out of Scope"},{"location":"roadmap/","text":"Roadmap There are three dimensions of support for each runtime Shell Completions Shell init Operating System Architecture Shell Supported shells will include Bash Zsh Ksh Fish Elvish Oil Right now, Bash is best supported Operating System Supported operating systems will include linux freebsd darwin windows aix openbsd netbsd solaris ( sunOS ) Right now, Linux is best supported Architecture Supported architectures will include x86_64 x86 arm64 armv7l armv6 ppc64 (nodejs) ppc64le (go, nodejs) s390x (go, nodejs) riscv64 (zig) Right now, x86_64 is best supported","title":"Roadmap"},{"location":"roadmap/#roadmap","text":"There are three dimensions of support for each runtime Shell Completions Shell init Operating System Architecture","title":"Roadmap"},{"location":"roadmap/#shell","text":"Supported shells will include Bash Zsh Ksh Fish Elvish Oil Right now, Bash is best supported","title":"Shell"},{"location":"roadmap/#operating-system","text":"Supported operating systems will include linux freebsd darwin windows aix openbsd netbsd solaris ( sunOS ) Right now, Linux is best supported","title":"Operating System"},{"location":"roadmap/#architecture","text":"Supported architectures will include x86_64 x86 arm64 armv7l armv6 ppc64 (nodejs) ppc64le (go, nodejs) s390x (go, nodejs) riscv64 (zig) Right now, x86_64 is best supported","title":"Architecture"},{"location":"api/filter/","text":"Filter API Filters can be implement in three different languages, but they all have similar functions In jq, functions are prefixed with f:: In Bash, functions are prefixed with f. In Perl, functions are prefixed with f_ is_main (Bash only) die print_error","title":"Filter API"},{"location":"api/filter/#filter-api","text":"Filters can be implement in three different languages, but they all have similar functions In jq, functions are prefixed with f:: In Bash, functions are prefixed with f. In Perl, functions are prefixed with f_ is_main (Bash only) die print_error","title":"Filter API"},{"location":"api/module/","text":"Module API Use the Module API to implement a version manager for a particular language. In this repository, the modules are located in ./pkg/src/modules <module>.table() Prints a version table to standard output. Each line of standard output looks like the following: <variant>|<version>|<os>|<arch>|<url>[|<comment>] Here are two examples: Go|v1.17.6|linux|x86_64|https://go.dev/dl/dl/go1.17.6.linux-amd64.tar.gz NodeJS|v15.9.0|linux|x86_64|https://nodejs.org/download/release/v15.9.0/node-v15.9.0-linux-x64.tar.gz|2021-02-18 To see the exact supported values for <os> and <arch> , see roadmap.md <module>.install() Downloads and extracts a particular version of a language. The following positional parameters are set: $1 : url $2 : version (does not contain v prefix) $3 : os $4 : arch Set the following variables for installation to complete successfully. REPLY_DIR is the only requried variable REPLY_DIR= REPLY_BINS=() REPLY_INCLUDES=() REPLY_LIBS=() REPLY_MANS=() REPLY_BASH_COMPLETIONS=() REPLY_ZSH_COMPLETIONS=() REPLY_FISH_COMPLETIONS=() Persisted state across installs / uninstalls <module>.switch() Called when switching to a particular version $1 : install_dir $2 : module_version <module>.env() Called when a module needs to set the environment <module>.dir() Called when a module needs to hook into cd . For example, the NodeJS module needs to change versions depending on not only .tool-versions , but also .nvm and .node-version By default, this automatically does the correct parsing of .tool-versions for the particular module","title":"Module API"},{"location":"api/module/#module-api","text":"Use the Module API to implement a version manager for a particular language. In this repository, the modules are located in ./pkg/src/modules","title":"Module API"},{"location":"api/module/#moduletable","text":"Prints a version table to standard output. Each line of standard output looks like the following: <variant>|<version>|<os>|<arch>|<url>[|<comment>] Here are two examples: Go|v1.17.6|linux|x86_64|https://go.dev/dl/dl/go1.17.6.linux-amd64.tar.gz NodeJS|v15.9.0|linux|x86_64|https://nodejs.org/download/release/v15.9.0/node-v15.9.0-linux-x64.tar.gz|2021-02-18 To see the exact supported values for <os> and <arch> , see roadmap.md","title":"&lt;module&gt;.table()"},{"location":"api/module/#moduleinstall","text":"Downloads and extracts a particular version of a language. The following positional parameters are set: $1 : url $2 : version (does not contain v prefix) $3 : os $4 : arch Set the following variables for installation to complete successfully. REPLY_DIR is the only requried variable REPLY_DIR= REPLY_BINS=() REPLY_INCLUDES=() REPLY_LIBS=() REPLY_MANS=() REPLY_BASH_COMPLETIONS=() REPLY_ZSH_COMPLETIONS=() REPLY_FISH_COMPLETIONS=() Persisted state across installs / uninstalls","title":"&lt;module&gt;.install()"},{"location":"api/module/#moduleswitch","text":"Called when switching to a particular version $1 : install_dir $2 : module_version","title":"&lt;module&gt;.switch()"},{"location":"api/module/#moduleenv","text":"Called when a module needs to set the environment","title":"&lt;module&gt;.env()"},{"location":"api/module/#moduledir","text":"Called when a module needs to hook into cd . For example, the NodeJS module needs to change versions depending on not only .tool-versions , but also .nvm and .node-version By default, this automatically does the correct parsing of .tool-versions for the particular module","title":"&lt;module&gt;.dir()"}]}